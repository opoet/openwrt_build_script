name: Build releases

on:
  workflow_dispatch:
    inputs:
      model:
        type: choice
        description: 'Select the model to build'
        required: true
        default: 'nanopi-r5s'
        options:
          - nanopi-r4s
          - nanopi-r5s
          - x86_64

env:
  WORKDIR:
  SHORT_SHA:
  latest_release:

jobs:
  build:
    name: Build ${{ github.event.inputs.model }}-${{ matrix.tag.version }}
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    strategy:
      fail-fast: false
      matrix:
        tag:
          - type: rc2
            version: openwrt-23.05

    steps:
    - name: Checkout
      uses: actions/checkout@main
      with:
        ref: main

    - name: Set time zone
      run: sudo timedatectl set-timezone 'Asia/Shanghai'

    - name: Show system
      run: |
        lscpu
        free -h
        df -Th
        uname -a

    - name: Set release env
      run: |
        sudo mkdir -p /builder
        sudo chown -R runner.runner /builder
        echo "WORKDIR=/builder" >> "$GITHUB_ENV"
        echo "SHORT_SHA=$(git rev-parse --short ${{ github.sha }})" >> "$GITHUB_ENV"

    - name: Free disk space
      run: |
        sudo rm -rf /etc/apt/sources.list.d
        sudo swapoff -a
        sudo rm -f /swapfile
        sudo docker image prune -a -f
        sudo systemctl stop docker
        sudo snap set system refresh.retain=2
        sudo apt-get -y purge firefox clang* ghc* google* llvm* mono* mongo* mysql* php*
        sudo apt-get -y autoremove --purge
        sudo apt-get clean
        sudo rm -rf /etc/mysql /etc/php /usr/lib/jvm /usr/libexec/docker /usr/local /usr/src/* /var/lib/docker /var/lib/gems /var/lib/mysql /var/lib/snapd /etc/skel /opt/{microsoft,az,hostedtoolcache,cni,mssql-tools,pipx} /usr/share/{az*,dotnet,swift,miniconda,gradle*,java,kotlinc,ri,sbt} /root/{.sbt,.local,.npm}
        sudo sed -i '/NVM_DIR/d;/skel/d' /root/{.bashrc,.profile}
        rm -rf ~/{.cargo,.dotnet,.rustup}
        df -Th

    - name: Build System Setup
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo sh -c 'echo "deb http://apt.llvm.org/focal/ llvm-toolchain-focal-17 main" >> /etc/apt/sources.list'
        sudo sh -c 'echo "deb-src http://apt.llvm.org/focal/ llvm-toolchain-focal-17 main" >> /etc/apt/sources.list'
        wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -
        sudo apt-get update
        sudo apt-get install -y build-essential flex bison clang-17 cmake g++ gawk gcc-multilib g++-multilib gettext git libfuse-dev libncurses5-dev libssl-dev python3 python3-pip python3-ply python3-distutils python3-pyelftools rsync unzip zlib1g-dev file wget subversion patch upx-ucl autoconf automake curl asciidoc binutils bzip2 lib32gcc-s1 libc6-dev-i386 uglifyjs msmtp texinfo libreadline-dev libglib2.0-dev xmlto libelf-dev libtool autopoint antlr3 gperf ccache swig coreutils haveged scons libpython3-dev rename qemu-utils
        sudo apt-get clean
        git config --global user.name 'GitHub Actions' && git config --global user.email 'noreply@github.com'
        df -Th

    - name: Compile OpenWrt
      working-directory: /builder
      id: compile
      continue-on-error: true
      run: |
        export GITHUB_REPO=${{ github.repository }}
        BUILD_FAST=y ENABLE_BPF=y ENABLE_LTO=y ENABLE_LRNG=y USE_GCC13=y USE_MOLD=y bash ${{ github.workspace }}/build.sh ${{ matrix.tag.type }} ${{ github.event.inputs.model }}
        cd openwrt
        tags=$(git describe --abbrev=0 --tags)
        echo "latest_release=$tags" >> "$GITHUB_ENV"

    - name: Extensive logs after a failed compilation
      working-directory: /builder
      if: steps.compile.outcome == 'failure'
      run: |
        cd openwrt
        make V=s

    - name: Prepare Firmware Files
      working-directory: /builder
      run: |
        mkdir -p rom info
        if [ "${{ github.event.inputs.model }}" = "nanopi-r4s" ]; then
          cp -a openwrt/bin/targets/rockchip/*/*.img.gz rom/
          cp -a openwrt/bin/targets/rockchip/*/*-r4s.manifest info/manifest.txt
          cp -a openwrt/bin/targets/rockchip/*/config.buildinfo info/config.buildinfo
          cd rom && sha256sum *gz > ../info/sha256sums.txt
        elif [ "${{ github.event.inputs.model }}" = "nanopi-r5s" ]; then
          cp -a openwrt/bin/targets/rockchip/*/*.img.gz rom/
          cp -a openwrt/bin/targets/rockchip/*/*.manifest info/manifest.txt
          cp -a openwrt/bin/targets/rockchip/*/config.buildinfo info/config.buildinfo
          cd rom && sha256sum *gz > ../info/sha256sums.txt
        elif [ "${{ github.event.inputs.model }}" = "x86_64" ]; then
          cp -a openwrt/bin/targets/x86/*/*-ext4-combined-efi.img.gz rom/
          cp -a openwrt/bin/targets/x86/*/*-squashfs-combined-efi.img.gz rom/
          cp -a openwrt/bin/targets/x86/*/*-generic-rootfs.tar.gz rom/
          cp -a openwrt/bin/targets/x86/*/*-x86-64-generic.manifest info/manifest.txt
          cp -a openwrt/bin/targets/x86/*/config.buildinfo info/config.buildinfo
          cd rom && sha256sum *gz > ../info/sha256sums.txt
        fi
        tar zcf buildinfo_${{ github.event.inputs.model }}.tar.gz ../info

    - name: Upload artifacts
      uses: actions/upload-artifact@main
      with:
        name: ${{ github.event.inputs.model }}-${{ matrix.tag.version }}
        path: |
          ${{ env.WORKDIR }}/rom/*.gz

    - name: Create release
      continue-on-error: true
      uses: ncipollo/release-action@main
      with:
        name: OpenWRT-${{ env.latest_release }}-${{ github.ref_name }}-${{ env.SHORT_SHA }}
        allowUpdates: true
        tag: ${{ env.latest_release }}-${{ github.ref_name }}-${{ env.SHORT_SHA }}
        commit: main
        replacesArtifacts: true
        token: ${{ secrets.GITHUB_TOKEN }}
        artifacts: |
          ${{ env.WORKDIR }}/rom/*
